/*
 * f4f Study Management Portal (Web App)
 *
 * Copyright (c) 2024 Technical University of Applied Sciences Wildau
 * Author: Philipp Wagner, Research Group Telematics
 * Contact: fgtelematik@th-wildau.de
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import {Role, TestUsernameResult, UserInput} from "../../models/auth.ts";
import {FC, useEffect, useState} from "react";
import {EditorDialog} from "../Editor/EditorDialog.tsx";
import {CircularProgress, debounce, TextField} from "@mui/material";
import useApi from "../../hooks/useApi";
import {AutocompleteEditField} from "../Editor/AutocompleteEditField.tsx";
import CheckIcon from '@mui/icons-material/Check';
import {isValidEmailAddress, locStr} from "../../utils.ts";
import {useDataState} from "../../hooks/useState/useData.ts";
import {ServerValidatedTextField} from "../Editor/ServerValidatedTextField.tsx";


let debouncedUsername: ReturnType<typeof debounce>;

export interface StaffEditorProps {
    editUser: UserInput | null;
    setEditUser: (staff: UserInput | null) => void;
    onSaveUser: (user: UserInput) => Promise<boolean>;
}

export const StaffEditor: FC<StaffEditorProps> = ({setEditUser, onSaveUser, editUser}) => {
    const [autogeneratedUsername, setAutogeneratedUsername] = useState("");
    const [lastEditUser, setLastEditUser] = useState<UserInput | null>(null);
    const [testUsernameResult, setTestUsernameResult] = useState<TestUsernameResult | undefined>("OK");
    const [isSubmitting, setIsSubmitting] = useState(false);

    const isValidEmail = !editUser?.email || editUser && isValidEmailAddress(editUser?.email)
    const isValidAuth = !!editUser && (!!editUser.id || !!editUser.email || !!editUser.new_password);
    const isValidUsername = !editUser?.username || !!editUser?.username && testUsernameResult == "OK";
    const isValid = !!editUser && isValidUsername && isValidAuth && isValidEmail;
    
    const studies = useDataState(state => state.studies);
    const studyName = (!!editUser?.study_id && locStr(studies.find(study => study.id == editUser?.study_id)?.title)) || "";
    

    let usernameHelperText = editUser?.id ? "Leave empty to keep current username" : 
        "Define a user name or leave empty to auto-generate";
    if (!testUsernameResult) {
        usernameHelperText = "Checking username...";
    }
    if (testUsernameResult == "InvalidName")
        usernameHelperText = "Invalid username";
    if (testUsernameResult == "UserExists")
        usernameHelperText = "This username is already taken. The usernames must be unique, also across studies.";

    useEffect(() => {
        const generateUsername = async () => {
            setAutogeneratedUsername(await useApi().generateUsername());
        }

        if(!lastEditUser) {
            // newly opened dialog
            
            if (!!editUser && !editUser.id)
                generateUsername();   // get auto-generated username for new users

            if (editUser?.id && editUser?.username) {
                // unset username on edit and set previous username as placeholder
                setAutogeneratedUsername(editUser.username);
                setEditUser({...editUser, username: undefined});
            }
        }

        setLastEditUser(editUser);
    }, [editUser]);

    const onSubmit = async () => {
        if (!editUser)
            return;
        
        const submitUser = {...editUser};
        
        if(!submitUser.username)
            submitUser.username = autogeneratedUsername;
        
        setEditUser(submitUser);
        
        setIsSubmitting(true)
        const success = await onSaveUser(submitUser);
        setIsSubmitting(false)
        
        if (success)
            setEditUser(null);
    }


    return <EditorDialog
        open={!!editUser}
        onSubmit={onSubmit}
        onCancel={() => setEditUser(null)}
        isValidContent={isValid}
        title={<>{!!editUser?.id ? "Edit" : "Create"} <b>{studyName}</b> staff member</>}>

        <AutocompleteEditField
            label={"Role"}
            disabled={isSubmitting}
            value={editUser?.role == Role.Nurse ? "Nurse" : "Scientist"}
            onChange={(value) => setEditUser({...editUser!, role: value == "Nurse" ? Role.Nurse : Role.Supervisor})}
            optionsSource={["Nurse", "Scientist"]}
            freeSolo={false}
            helperText={<p>
                <b>Nurse</b>: Can create and management participant profiles with the Android Apps<br/>
                <b>Scientist</b>: Can access acquired study data through Web App or RESTful API
            </p>}
        />

        <ServerValidatedTextField
            validateFn={useApi().testUsername}
            updateValidationResult={setTestUsernameResult}
            isPositiveValidationResult={!!editUser?.username && testUsernameResult == "OK"}
            disabled={isSubmitting}
            value={editUser?.username ?? ""}
            onChange={(e) => setEditUser({...editUser!, username: e.target.value})}
            label={"Username"}
            placeholder={autogeneratedUsername}
            InputLabelProps={{shrink: true}}
            error={!!editUser?.username && testUsernameResult && testUsernameResult != "OK"}
            helperText={usernameHelperText}
        />


        <TextField
            disabled={isSubmitting}
            value={editUser?.new_password ?? ""}
            onChange={e => setEditUser({...editUser!, new_password: e.target.value})}
            label={"Password"}
            placeholder={editUser?.id ? "(unchanged)" : "(auto-generate)"}
            InputLabelProps={{shrink: true}}
            helperText={editUser?.id ?
                "Leave empty to keep current password" :
                "Set password or leave empty to auto-generate (will be sent to user by email)"
            }
        />

        <TextField
            disabled={isSubmitting}
            value={editUser?.email ?? ""}
            onChange={e => setEditUser({...editUser!, email: e.target.value})}
            label={"E-Mail Address"}
            type={"email"}
            placeholder={"staff@" + window.location.hostname}
            error={!isValidEmail}
            helperText={ isValidEmail ?
                <>If specified, the login information will be sent to this address.<br/>The email address will not be stored and only be used for this purpose.</> :
                <>Please enter a valid email address or leave empty.<br/></>
            }
        />

        {!isValidAuth && <p style={{color: "red"}}>Please either enter an email address or set a password.</p>}
        {isSubmitting && <div className={"simple-row"} style={{justifyContent: "center"}}><CircularProgress size={"1em"}/><p>Saving staff member...</p></div>}
        
    </EditorDialog>
}