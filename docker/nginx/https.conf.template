

server {
	listen ${NGINX_HTTPS_PORT} ssl http2;
	listen [::]:${NGINX_HTTPS_PORT} ssl http2;
	
	ssl_certificate ${NGINX_HTTPS_CERT_PATH};
	ssl_certificate_key ${NGINX_HTTPS_KEY_PATH};
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_session_cache   shared:SSL:40m;
	ssl_session_timeout 4h;
	ssl_session_tickets on;
	
	add_header Strict-Transport-Security "max-age=31536000" always;
	
	client_max_body_size 4G;
	server_name ${NGINX_HOST_NAME};
	
	location / {
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_redirect off;
		proxy_buffering off;
		proxy_cache off;
		proxy_pass http://f4fbackend;
	}	

	location /app {
		return 301 $scheme://$http_host/apk/${NGINX_APK_FILE};
	}
}


map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

upstream f4fbackend {
	server ${NGINX_BACKEND_HOST}:${NGINX_BACKEND_PORT};
}


server {
    listen ${NGINX_HTTP_PORT};
    server_name ${NGINX_HOST_NAME};
	
	return 301 https://${NGINX_HOST_NAME}:${NGINX_HTTPS_PORT}$request_uri;
}